@using BTCPayServer.Services.Altcoins.Ethereum.Services
@inject BTCPayNetworkProvider BTCPayNetworkProvider
@inject EthereumService EthereumService;

@inject SignInManager<ApplicationUser> SignInManager;
@{
    var networks = BTCPayNetworkProvider.GetAll().OfType<EthereumBTCPayNetwork>().OrderBy(network => network.ChainId);
}

@foreach (var network in networks)
{
    EthereumService.LastObservedChainHistory.TryGetValue(BTCPayEthereumBlockProgressRepository.EthereumChainHistory.GetSettingsKey(network.ChainId, network is ERC20BTCPayNetwork), out var chainHistory);
    <h4>@network.CryptoCode (Chain ID: @network.ChainId) @(chainHistory?.IsERC is true ? "(ERC20)" : "")</h4>
    <ul>
        @if (!EthereumService.IsAvailable(network.CryptoCode))
        {
            <li>
                The node is still catching up to within the last 12 blocks or has not yet been configured.


                @if (SignInManager.IsSignedIn(User) && User.IsInRole(Roles.ServerAdmin))
                {
                    <a asp-action="UpdateChainConfig" asp-controller="EthereumConfig" asp-route-chainId="@network.ChainId">Configure Web3</a>
                }
            </li>
        }
        @if (chainHistory?.LastBlockNumber != null)
        {
            <li>Last synced block number height: @chainHistory.LastBlockNumber</li>
        }
    </ul>
}
